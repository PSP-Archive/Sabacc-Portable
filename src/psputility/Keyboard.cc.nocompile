#if (_PSP_FW_VERSION >= 1)// Only build under a true PSP build.

/**
 * Sabacc Media Framework
 *
 * Author: goumba
 * Date: December 29, 2008
 *
 * File: Keyboard.cc
 *
 * An interface to the PSP On Screen Keyboard (and in the future the
 * IR keyboard for models which support it).
 *
 */

// Standard Library headers
#include <cstring>
#include <string>
using std::string;

// PSP SDK headers
#include <pspkernel.h>
#include <pspdisplay.h>
#include <pspgu.h>
#include <pspkerneltypes.h>
#include <psputility.h>

// SMF headers
#include "base/Object.hh"
#include "psputility/Keyboard.hh"

PSPKeyboard::PSPKeyboard() :
  input(), output(), help(), is_init(false),
  osk_data(), osk_params()
{
}
PSPKeyboard::PSPKeyboard(const std::string& default_text) :
  input(), output(), help(), is_init(false),
  osk_data(), osk_params()
{
  stringToUShort(default_text, input);
}     
PSPKeyboard::PSPKeyboard(const string& default_text, const string& help) :
  input(), output(), help(), is_init(false),
  osk_data(), osk_params()
{
  stringToUShort(default_text, input);
  stringToUShort(help, help);
}
PSPKeyboard::~PSPKeyboard() 
{
}

const std::string PSPKeyboard::getText() 
{
  return(uShortToString(output));
}
void PSPKeyboard::setText(const std::string& new_text)
{
  stringToUShort(new_text, input);
} 
const std::string PSPKeyboard::getHelpText()
{
  return(uShortToString(help));
}
void PSPKeyboard::setHelptext(const std::string& help)
{
  stringToUShort(help, help);
}

void PSPKeyboard::init() 
{
}

string PSPKeyboard::show()
{

  SceUtilityOskData osk_data[1];
  SceUtilityOskParams osk_params;

  sceGuInit();

  memset(osk_data, 0, sizeof(SceUtilityOskData));

  osk_data->language = PSP_UTILITY_OSK_LANGUAGE_DEFAULT;
  osk_data->lines = 1;
  osk_data->unk_24 = 1;
  osk_data->inputtype = PSP_UTILITY_OSK_INPUTTYPE_ALL; // Allow all input types
  osk_data->desc = help;
  osk_data->intext = input;
  osk_data->outtextlength = 32;
  osk_data->outtextlimit = 32; // Limit input to 32 characters
  osk_data->outtext = output;

  memset(&osk_params, 0, sizeof(osk_params));
  osk_params.base.size = sizeof(osk_params);
  sceUtilityGetSystemParamInt(PSP_SYSTEMPARAM_ID_INT_LANGUAGE, &osk_params.base.language);
  sceUtilityGetSystemParamInt(PSP_SYSTEMPARAM_ID_INT_UNKNOWN, &osk_params.base.buttonSwap);
  osk_params.base.graphicsThread = 17;
  osk_params.base.accessThread = 19;
  osk_params.base.fontThread = 18;
  osk_params.base.soundThread = 16;
  osk_params.datacount = 1;
  osk_params.data = osk_data;

  sceUtilityOskInitStart(&osk_params);

  bool done = false;
	
  while(!done)
    {
      sceGuClearColor(0);
      sceGuClearDepth(0);
      sceGuClear(GU_COLOR_BUFFER_BIT|GU_DEPTH_BUFFER_BIT);

      sceGuSync(0,0);

      switch(sceUtilityOskGetStatus())
	{
	case PSP_UTILITY_DIALOG_INIT:
	  break;
			
	case PSP_UTILITY_DIALOG_VISIBLE:
	  sceUtilityOskUpdate(1);
	  break;
			
	case PSP_UTILITY_DIALOG_QUIT:
	  sceUtilityOskShutdownStart();
	  break;
	  
	case PSP_UTILITY_DIALOG_FINISHED:
	  break;
	  
	case PSP_UTILITY_DIALOG_NONE:
	  done = 1;
	  
	default :
	  break;
	}
      
      sceDisplayWaitVblankStart();
      sceGuSwapBuffers();
    }

  for(size_t tc = 0; (tc < sizeof(output)) && osk_data->outtext[tc]; ++tc)
    output[tc] = osk_data->outtext[tc];
  
  return(uShortToString(output));
  
}// show

void PSPKeyboard::stringToUShort(const string& src, unsigned short* dst)
{

  memset(dst, 0, sizeof(dst));
  
  for(size_t tc = 0; (tc < sizeof(dst)) && (tc < src.length()); ++tc) 
    {
    }// for(tc)
}// copyString

string PSPKeyboard::uShortToString(unsigned short* src)
{
  char out[32];
  for(size_t tc = 0; (tc < sizeof(src)) && src[tc]; ++tc)
    out[tc] = static_cast<unsigned char>(src[tc]);
  
  return(out);
}// copyUShortToString

#endif// _PSP_FW_VERSION
